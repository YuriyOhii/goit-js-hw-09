{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAgCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAWtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACLN,EACFI,EAAQ,CAACN,WAAUC,UAEnBM,EAAO,CAACP,WAAUC,S,GAEnBA,E,IAvCSQ,SAASC,cAAc,SAC/BC,iBAAiB,UAGzB,SAAsBC,GACpBA,EAAEC,iBACF,IAAgCC,EAAAF,EAAEG,OAAOC,SAAjCC,EAAwBH,EAAxBG,OAAQhB,EAAgBa,EAAhBb,MAAOiB,EAASJ,EAATI,KACjBC,EAAQ,CACZC,WAAYnB,EAAMoB,cAClBC,UAAWJ,EAAKG,cAChBJ,OAAQA,EAAOI,eAEjB,GAAIF,EAAMC,WAAa,GAAKD,EAAMG,UAAY,GAAKH,EAAMF,QAAU,EAAG,OAAOpB,EAAA0B,OAAOC,QAAS,2BAI/F,SAA4BC,GAE1B,I,IAF4BL,EAAFK,EAAEL,WAAYE,EAAdG,EAAcH,UAAWL,EAAzBQ,EAAyBR,OAC/CS,EAAQN,EACHO,EAAI,EAAGA,GAAKV,EAAQU,GAAK,EAChC5B,EAAc4B,EAAGD,GACdE,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBJ,EAAA0B,OAAOO,QAAQ,qBAAoCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE1D+B,OAAM,SAAAH,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBJ,EAAA0B,OAAOC,QAAQ,oBAAmCO,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE5DyB,GAASJ,C,CAbXW,CAAmBd,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onFormSubmit);\n\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n  const { amount, delay, step } = e.target.elements;\n  const value = {\n    firstDelay: delay.valueAsNumber,\n    stepDelay: step.valueAsNumber,\n    amount: amount.valueAsNumber,\n  };\n  if (value.firstDelay < 0 || value.stepDelay < 0 || value.amount <= 0) return Notify.failure(`Put the correct values`);\n  makePluralPromises(value);\n}\n\nfunction makePluralPromises({ firstDelay, stepDelay, amount }) {\n  let delay = firstDelay;\n  for (let i = 1; i <= amount; i += 1) {\n    createPromise(i, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += stepDelay;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay);\n  });\n  \n  return promise;\n\n}\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","_elements","target","elements","amount","step","value","firstDelay","valueAsNumber","stepDelay","Notify","failure","param1","delay1","i","then","param","success","concat","catch","$ce04d3a99e08e73b$var$makePluralPromises"],"version":3,"file":"03-promises.2971c2c9.js.map"}